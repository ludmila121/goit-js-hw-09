{"mappings":"gfAgBA,IAAAA,EAAAC,EAAA,SAwCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAgB,CAAEL,WAAUC,SAClC,OAAO,IAAIK,SACT,SAACC,EAASC,GACJN,GACFK,EAAQF,GAERG,EAAOH,E,KA/CF,CACXI,KAAMC,SAASC,cAAc,WAE1BF,KAAKG,iBAAiB,UAE3B,SAA4BC,GAC1BA,EAAEC,iBAWF,IAVA,IAAIC,EAAaC,OAAOH,EAAEI,cAAchB,MAAMiB,OAC1CC,EAAYH,OAAOH,EAAEI,cAAcG,KAAKF,OACxCG,EAAcL,OAAOH,EAAEI,cAAcK,OAAOJ,OAQvCK,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EACrCxB,EAAcwB,EAAGR,GACdS,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjByB,YAAW,WACT7B,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,GAC5DA,E,IAEJ6B,OAAM,SAAAL,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClByB,YAAW,WACT7B,EAAA8B,OAAOI,QAAQ,sBAAuCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,GAC3DA,E,IAEPc,GAAcI,EACdN,EAAEmB,OAAOC,O","sources":["src/js/03-promises.js"],"sourcesContent":["//HTML містить розмітку форми, в поля якої користувач буде вводити першу \n//затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого \n//і кількість промісів, яку необхідно створити.\n\n/* УВАГА\nНаступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\nДля відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.*/\n/* recomendation from Sergiy illarionov\n1. + Добавити розмітку +\n2. + Добавити 'submit' слухача на форму\n3. Зловити в події дані з форми - 'delay', 'step', 'amount'\n4. Використати 'amount' як к-сть запуску функції createPromise\n5. Викликати createPromise n разів і використати index як 'position' \ni delay = (delay + step) із форми \n*/\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst refs = {\n  form: document.querySelector('.form'),\n};\nrefs.form.addEventListener('submit', createPromptSubmit);\n\nfunction createPromptSubmit(e) {\n  e.preventDefault();\n  let delayValue = Number(e.currentTarget.delay.value);\n  let stepValue = Number(e.currentTarget.step.value);\n  let amountValue = Number(e.currentTarget.amount.value);\n\n/* Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується \nабо відхиляється через delay часу.Значенням промісу повинен бути об'єкт, в якому будуть властивості \nposition і delay зі значеннями однойменних параметрів.Використовуй початковий код функції для вибору того, що потрібно зробити \nз промісом - виконати або відхилити.\n */ \n  \n  for (let i = 1; i <= amountValue; i += 1){\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }, delay);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        }, delay);\n      });\n    delayValue += stepValue;\n    e.target.reset();\n  }\n}\n/*  Напиши скрипт, який на момент сабміту форми викликає функцію \ncreatePromise(position, delay) стільки разів, скільки ввели в поле amount.\nПід час кожного виклику передай їй номер промісу(position), що створюється, і затримку, \nвраховуючи першу затримку(delay), введену користувачем, і крок(step).\n */\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const objectPromise = { position, delay };\n  return new Promise(\n    (resolve, reject) => {\n      if (shouldResolve) {\n        resolve(objectPromise);\n      } \n        reject(objectPromise)\n      }\n  );\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","objectPromise","Promise","resolve","reject","form","document","querySelector","addEventListener","e","preventDefault","delayValue","Number","currentTarget","value","stepValue","step","amountValue","amount","i","then","param","setTimeout","Notify","success","concat","catch","failure","target","reset"],"version":3,"file":"03-promises.d025ce24.js.map"}